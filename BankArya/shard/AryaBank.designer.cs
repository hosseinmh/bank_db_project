#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace shard
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Bank")]
	public partial class AryaBankDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccountCurrent(AccountCurrent instance);
    partial void UpdateAccountCurrent(AccountCurrent instance);
    partial void DeleteAccountCurrent(AccountCurrent instance);
    partial void InserttotalSaving(totalSaving instance);
    partial void UpdatetotalSaving(totalSaving instance);
    partial void DeletetotalSaving(totalSaving instance);
    partial void InsertAccountLongTime(AccountLongTime instance);
    partial void UpdateAccountLongTime(AccountLongTime instance);
    partial void DeleteAccountLongTime(AccountLongTime instance);
    partial void InsertAccountSaving(AccountSaving instance);
    partial void UpdateAccountSaving(AccountSaving instance);
    partial void DeleteAccountSaving(AccountSaving instance);
    partial void InsertAccountShortTime(AccountShortTime instance);
    partial void UpdateAccountShortTime(AccountShortTime instance);
    partial void DeleteAccountShortTime(AccountShortTime instance);
    partial void Insertcheque(cheque instance);
    partial void Updatecheque(cheque instance);
    partial void Deletecheque(cheque instance);
    partial void InsertClose(Close instance);
    partial void UpdateClose(Close instance);
    partial void DeleteClose(Close instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertEmploy(Employ instance);
    partial void UpdateEmploy(Employ instance);
    partial void DeleteEmploy(Employ instance);
    partial void InsertMoveCurrentToSaving(MoveCurrentToSaving instance);
    partial void UpdateMoveCurrentToSaving(MoveCurrentToSaving instance);
    partial void DeleteMoveCurrentToSaving(MoveCurrentToSaving instance);
    partial void InsertMoveSavingtoCurrent(MoveSavingtoCurrent instance);
    partial void UpdateMoveSavingtoCurrent(MoveSavingtoCurrent instance);
    partial void DeleteMoveSavingtoCurrent(MoveSavingtoCurrent instance);
    partial void InsertMoveSavingToShortTime(MoveSavingToShortTime instance);
    partial void UpdateMoveSavingToShortTime(MoveSavingToShortTime instance);
    partial void DeleteMoveSavingToShortTime(MoveSavingToShortTime instance);
    partial void InsertMoveShortTimeToCurrent(MoveShortTimeToCurrent instance);
    partial void UpdateMoveShortTimeToCurrent(MoveShortTimeToCurrent instance);
    partial void DeleteMoveShortTimeToCurrent(MoveShortTimeToCurrent instance);
    partial void InsertRequestCheque(RequestCheque instance);
    partial void UpdateRequestCheque(RequestCheque instance);
    partial void DeleteRequestCheque(RequestCheque instance);
    partial void InserttotalCurrent(totalCurrent instance);
    partial void UpdatetotalCurrent(totalCurrent instance);
    partial void DeletetotalCurrent(totalCurrent instance);
    partial void InsertBackCheque(BackCheque instance);
    partial void UpdateBackCheque(BackCheque instance);
    partial void DeleteBackCheque(BackCheque instance);
    #endregion
		
		public AryaBankDataContext() : 
				base(global::shard.Properties.Settings.Default.BankConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AryaBankDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AryaBankDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AryaBankDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AryaBankDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccountCurrent> AccountCurrents
		{
			get
			{
				return this.GetTable<AccountCurrent>();
			}
		}
		
		public System.Data.Linq.Table<totalSaving> totalSavings
		{
			get
			{
				return this.GetTable<totalSaving>();
			}
		}
		
		public System.Data.Linq.Table<AccountLongTime> AccountLongTimes
		{
			get
			{
				return this.GetTable<AccountLongTime>();
			}
		}
		
		public System.Data.Linq.Table<AccountSaving> AccountSavings
		{
			get
			{
				return this.GetTable<AccountSaving>();
			}
		}
		
		public System.Data.Linq.Table<AccountShortTime> AccountShortTimes
		{
			get
			{
				return this.GetTable<AccountShortTime>();
			}
		}
		
		public System.Data.Linq.Table<cheque> cheques
		{
			get
			{
				return this.GetTable<cheque>();
			}
		}
		
		public System.Data.Linq.Table<Close> Closes
		{
			get
			{
				return this.GetTable<Close>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Employ> Employs
		{
			get
			{
				return this.GetTable<Employ>();
			}
		}
		
		public System.Data.Linq.Table<MoveCurrentToSaving> MoveCurrentToSavings
		{
			get
			{
				return this.GetTable<MoveCurrentToSaving>();
			}
		}
		
		public System.Data.Linq.Table<MoveSavingtoCurrent> MoveSavingtoCurrents
		{
			get
			{
				return this.GetTable<MoveSavingtoCurrent>();
			}
		}
		
		public System.Data.Linq.Table<MoveSavingToShortTime> MoveSavingToShortTimes
		{
			get
			{
				return this.GetTable<MoveSavingToShortTime>();
			}
		}
		
		public System.Data.Linq.Table<MoveShortTimeToCurrent> MoveShortTimeToCurrents
		{
			get
			{
				return this.GetTable<MoveShortTimeToCurrent>();
			}
		}
		
		public System.Data.Linq.Table<RequestCheque> RequestCheques
		{
			get
			{
				return this.GetTable<RequestCheque>();
			}
		}
		
		public System.Data.Linq.Table<totalCurrent> totalCurrents
		{
			get
			{
				return this.GetTable<totalCurrent>();
			}
		}
		
		public System.Data.Linq.Table<BackCheque> BackCheques
		{
			get
			{
				return this.GetTable<BackCheque>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.p_active_current")]
		public int p_active_current([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> p)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), p);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.p_Request_cheque")]
		public int p_Request_cheque([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> idcurrent, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> codecheque)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idcurrent, codecheque);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.p_active_saving")]
		public int p_active_saving([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> p)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), p);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.p_mojodi_current")]
		public ISingleResult<p_mojodi_currentResult> p_mojodi_current([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> p1)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), p1);
			return ((ISingleResult<p_mojodi_currentResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.p_move2Current")]
		public ISingleResult<p_move2CurrentResult> p_move2Current([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> p1)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), p1);
			return ((ISingleResult<p_move2CurrentResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.p_move2Saving")]
		public ISingleResult<p_move2SavingResult> p_move2Saving([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> p1)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), p1);
			return ((ISingleResult<p_move2SavingResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.p_move2ShortTime")]
		public ISingleResult<p_move2ShortTimeResult> p_move2ShortTime([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> p1)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), p1);
			return ((ISingleResult<p_move2ShortTimeResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.p_mojodi_Saving")]
		public ISingleResult<p_mojodi_SavingResult> p_mojodi_Saving([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> p1)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), p1);
			return ((ISingleResult<p_mojodi_SavingResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.getIdcurrent")]
		public ISingleResult<getIdcurrentResult> getIdcurrent([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> p1)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), p1);
			return ((ISingleResult<getIdcurrentResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.getIdshorttime")]
		public ISingleResult<getIdshorttimeResult> getIdshorttime([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> p1)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), p1);
			return ((ISingleResult<getIdshorttimeResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.getIdlongtime")]
		public ISingleResult<getIdlongtimeResult> getIdlongtime([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> p1)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), p1);
			return ((ISingleResult<getIdlongtimeResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.getIdsaving")]
		public ISingleResult<getIdsavingResult> getIdsaving([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> p1)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), p1);
			return ((ISingleResult<getIdsavingResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_close")]
		public int P_close([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> closeKind, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> codeAccount)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), closeKind, codeAccount);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GTIdCustomer")]
		public ISingleResult<GTIdCustomerResult> GTIdCustomer([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> p1)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), p1);
			return ((ISingleResult<GTIdCustomerResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountCurrent")]
	public partial class AccountCurrent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IDAccountCurrent;
		
		private long _currentCode;
		
		private string _ReagentName;
		
		private string _ReagentFamily;
		
		private long _ReagentIDAccount;
		
		private System.Data.Linq.Binary _ReagentEndorsement;
		
		private bool _active;
		
		private System.Nullable<long> _IDcustomer;
		
		private System.Nullable<long> _amount;
		
		private EntitySet<cheque> _cheques;
		
		private EntitySet<Close> _Closes;
		
		private EntitySet<MoveCurrentToSaving> _MoveCurrentToSavings;
		
		private EntitySet<MoveSavingtoCurrent> _MoveSavingtoCurrents;
		
		private EntitySet<MoveShortTimeToCurrent> _MoveShortTimeToCurrents;
		
		private EntitySet<RequestCheque> _RequestCheques;
		
		private EntitySet<totalCurrent> _totalCurrents;
		
		private EntitySet<BackCheque> _BackCheques;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDAccountCurrentChanging(long value);
    partial void OnIDAccountCurrentChanged();
    partial void OncurrentCodeChanging(long value);
    partial void OncurrentCodeChanged();
    partial void OnReagentNameChanging(string value);
    partial void OnReagentNameChanged();
    partial void OnReagentFamilyChanging(string value);
    partial void OnReagentFamilyChanged();
    partial void OnReagentIDAccountChanging(long value);
    partial void OnReagentIDAccountChanged();
    partial void OnReagentEndorsementChanging(System.Data.Linq.Binary value);
    partial void OnReagentEndorsementChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnIDcustomerChanging(System.Nullable<long> value);
    partial void OnIDcustomerChanged();
    partial void OnamountChanging(System.Nullable<long> value);
    partial void OnamountChanged();
    #endregion
		
		public AccountCurrent()
		{
			this._cheques = new EntitySet<cheque>(new Action<cheque>(this.attach_cheques), new Action<cheque>(this.detach_cheques));
			this._Closes = new EntitySet<Close>(new Action<Close>(this.attach_Closes), new Action<Close>(this.detach_Closes));
			this._MoveCurrentToSavings = new EntitySet<MoveCurrentToSaving>(new Action<MoveCurrentToSaving>(this.attach_MoveCurrentToSavings), new Action<MoveCurrentToSaving>(this.detach_MoveCurrentToSavings));
			this._MoveSavingtoCurrents = new EntitySet<MoveSavingtoCurrent>(new Action<MoveSavingtoCurrent>(this.attach_MoveSavingtoCurrents), new Action<MoveSavingtoCurrent>(this.detach_MoveSavingtoCurrents));
			this._MoveShortTimeToCurrents = new EntitySet<MoveShortTimeToCurrent>(new Action<MoveShortTimeToCurrent>(this.attach_MoveShortTimeToCurrents), new Action<MoveShortTimeToCurrent>(this.detach_MoveShortTimeToCurrents));
			this._RequestCheques = new EntitySet<RequestCheque>(new Action<RequestCheque>(this.attach_RequestCheques), new Action<RequestCheque>(this.detach_RequestCheques));
			this._totalCurrents = new EntitySet<totalCurrent>(new Action<totalCurrent>(this.attach_totalCurrents), new Action<totalCurrent>(this.detach_totalCurrents));
			this._BackCheques = new EntitySet<BackCheque>(new Action<BackCheque>(this.attach_BackCheques), new Action<BackCheque>(this.detach_BackCheques));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAccountCurrent", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IDAccountCurrent
		{
			get
			{
				return this._IDAccountCurrent;
			}
			set
			{
				if ((this._IDAccountCurrent != value))
				{
					this.OnIDAccountCurrentChanging(value);
					this.SendPropertyChanging();
					this._IDAccountCurrent = value;
					this.SendPropertyChanged("IDAccountCurrent");
					this.OnIDAccountCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currentCode", DbType="BigInt NOT NULL")]
		public long currentCode
		{
			get
			{
				return this._currentCode;
			}
			set
			{
				if ((this._currentCode != value))
				{
					this.OncurrentCodeChanging(value);
					this.SendPropertyChanging();
					this._currentCode = value;
					this.SendPropertyChanged("currentCode");
					this.OncurrentCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReagentName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string ReagentName
		{
			get
			{
				return this._ReagentName;
			}
			set
			{
				if ((this._ReagentName != value))
				{
					this.OnReagentNameChanging(value);
					this.SendPropertyChanging();
					this._ReagentName = value;
					this.SendPropertyChanged("ReagentName");
					this.OnReagentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReagentFamily", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string ReagentFamily
		{
			get
			{
				return this._ReagentFamily;
			}
			set
			{
				if ((this._ReagentFamily != value))
				{
					this.OnReagentFamilyChanging(value);
					this.SendPropertyChanging();
					this._ReagentFamily = value;
					this.SendPropertyChanged("ReagentFamily");
					this.OnReagentFamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReagentIDAccount", DbType="BigInt NOT NULL")]
		public long ReagentIDAccount
		{
			get
			{
				return this._ReagentIDAccount;
			}
			set
			{
				if ((this._ReagentIDAccount != value))
				{
					this.OnReagentIDAccountChanging(value);
					this.SendPropertyChanging();
					this._ReagentIDAccount = value;
					this.SendPropertyChanged("ReagentIDAccount");
					this.OnReagentIDAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReagentEndorsement", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ReagentEndorsement
		{
			get
			{
				return this._ReagentEndorsement;
			}
			set
			{
				if ((this._ReagentEndorsement != value))
				{
					this.OnReagentEndorsementChanging(value);
					this.SendPropertyChanging();
					this._ReagentEndorsement = value;
					this.SendPropertyChanged("ReagentEndorsement");
					this.OnReagentEndorsementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDcustomer", DbType="BigInt")]
		public System.Nullable<long> IDcustomer
		{
			get
			{
				return this._IDcustomer;
			}
			set
			{
				if ((this._IDcustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDcustomerChanging(value);
					this.SendPropertyChanging();
					this._IDcustomer = value;
					this.SendPropertyChanged("IDcustomer");
					this.OnIDcustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="BigInt")]
		public System.Nullable<long> amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCurrent_cheque", Storage="_cheques", ThisKey="IDAccountCurrent", OtherKey="IDAccountCurrent")]
		public EntitySet<cheque> cheques
		{
			get
			{
				return this._cheques;
			}
			set
			{
				this._cheques.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCurrent_Close", Storage="_Closes", ThisKey="IDAccountCurrent", OtherKey="IDAccountCurrent")]
		public EntitySet<Close> Closes
		{
			get
			{
				return this._Closes;
			}
			set
			{
				this._Closes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCurrent_MoveCurrentToSaving", Storage="_MoveCurrentToSavings", ThisKey="IDAccountCurrent", OtherKey="IDCurrent")]
		public EntitySet<MoveCurrentToSaving> MoveCurrentToSavings
		{
			get
			{
				return this._MoveCurrentToSavings;
			}
			set
			{
				this._MoveCurrentToSavings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCurrent_MoveSavingtoCurrent", Storage="_MoveSavingtoCurrents", ThisKey="IDAccountCurrent", OtherKey="IDCurrent")]
		public EntitySet<MoveSavingtoCurrent> MoveSavingtoCurrents
		{
			get
			{
				return this._MoveSavingtoCurrents;
			}
			set
			{
				this._MoveSavingtoCurrents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCurrent_MoveShortTimeToCurrent", Storage="_MoveShortTimeToCurrents", ThisKey="IDAccountCurrent", OtherKey="IDCurrent")]
		public EntitySet<MoveShortTimeToCurrent> MoveShortTimeToCurrents
		{
			get
			{
				return this._MoveShortTimeToCurrents;
			}
			set
			{
				this._MoveShortTimeToCurrents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCurrent_RequestCheque", Storage="_RequestCheques", ThisKey="IDAccountCurrent", OtherKey="IDAccountCurrent")]
		public EntitySet<RequestCheque> RequestCheques
		{
			get
			{
				return this._RequestCheques;
			}
			set
			{
				this._RequestCheques.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCurrent_totalCurrent", Storage="_totalCurrents", ThisKey="IDAccountCurrent", OtherKey="IDAccountCurrent")]
		public EntitySet<totalCurrent> totalCurrents
		{
			get
			{
				return this._totalCurrents;
			}
			set
			{
				this._totalCurrents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCurrent_BackCheque", Storage="_BackCheques", ThisKey="IDAccountCurrent", OtherKey="IDcurrent")]
		public EntitySet<BackCheque> BackCheques
		{
			get
			{
				return this._BackCheques;
			}
			set
			{
				this._BackCheques.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_AccountCurrent", Storage="_Customer", ThisKey="IDcustomer", OtherKey="IDCustomer", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.AccountCurrents.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.AccountCurrents.Add(this);
						this._IDcustomer = value.IDCustomer;
					}
					else
					{
						this._IDcustomer = default(Nullable<long>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cheques(cheque entity)
		{
			this.SendPropertyChanging();
			entity.AccountCurrent = this;
		}
		
		private void detach_cheques(cheque entity)
		{
			this.SendPropertyChanging();
			entity.AccountCurrent = null;
		}
		
		private void attach_Closes(Close entity)
		{
			this.SendPropertyChanging();
			entity.AccountCurrent = this;
		}
		
		private void detach_Closes(Close entity)
		{
			this.SendPropertyChanging();
			entity.AccountCurrent = null;
		}
		
		private void attach_MoveCurrentToSavings(MoveCurrentToSaving entity)
		{
			this.SendPropertyChanging();
			entity.AccountCurrent = this;
		}
		
		private void detach_MoveCurrentToSavings(MoveCurrentToSaving entity)
		{
			this.SendPropertyChanging();
			entity.AccountCurrent = null;
		}
		
		private void attach_MoveSavingtoCurrents(MoveSavingtoCurrent entity)
		{
			this.SendPropertyChanging();
			entity.AccountCurrent = this;
		}
		
		private void detach_MoveSavingtoCurrents(MoveSavingtoCurrent entity)
		{
			this.SendPropertyChanging();
			entity.AccountCurrent = null;
		}
		
		private void attach_MoveShortTimeToCurrents(MoveShortTimeToCurrent entity)
		{
			this.SendPropertyChanging();
			entity.AccountCurrent = this;
		}
		
		private void detach_MoveShortTimeToCurrents(MoveShortTimeToCurrent entity)
		{
			this.SendPropertyChanging();
			entity.AccountCurrent = null;
		}
		
		private void attach_RequestCheques(RequestCheque entity)
		{
			this.SendPropertyChanging();
			entity.AccountCurrent = this;
		}
		
		private void detach_RequestCheques(RequestCheque entity)
		{
			this.SendPropertyChanging();
			entity.AccountCurrent = null;
		}
		
		private void attach_totalCurrents(totalCurrent entity)
		{
			this.SendPropertyChanging();
			entity.AccountCurrent = this;
		}
		
		private void detach_totalCurrents(totalCurrent entity)
		{
			this.SendPropertyChanging();
			entity.AccountCurrent = null;
		}
		
		private void attach_BackCheques(BackCheque entity)
		{
			this.SendPropertyChanging();
			entity.AccountCurrent = this;
		}
		
		private void detach_BackCheques(BackCheque entity)
		{
			this.SendPropertyChanging();
			entity.AccountCurrent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.totalSaving")]
	public partial class totalSaving : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IDTotal;
		
		private long _IDCustomer;
		
		private System.Nullable<System.DateTime> _date;
		
		private System.Nullable<long> _IDAccountSaving;
		
		private EntityRef<AccountSaving> _AccountSaving;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDTotalChanging(long value);
    partial void OnIDTotalChanged();
    partial void OnIDCustomerChanging(long value);
    partial void OnIDCustomerChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnIDAccountSavingChanging(System.Nullable<long> value);
    partial void OnIDAccountSavingChanged();
    #endregion
		
		public totalSaving()
		{
			this._AccountSaving = default(EntityRef<AccountSaving>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTotal", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IDTotal
		{
			get
			{
				return this._IDTotal;
			}
			set
			{
				if ((this._IDTotal != value))
				{
					this.OnIDTotalChanging(value);
					this.SendPropertyChanging();
					this._IDTotal = value;
					this.SendPropertyChanged("IDTotal");
					this.OnIDTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="BigInt NOT NULL")]
		public long IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAccountSaving", DbType="BigInt")]
		public System.Nullable<long> IDAccountSaving
		{
			get
			{
				return this._IDAccountSaving;
			}
			set
			{
				if ((this._IDAccountSaving != value))
				{
					if (this._AccountSaving.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAccountSavingChanging(value);
					this.SendPropertyChanging();
					this._IDAccountSaving = value;
					this.SendPropertyChanged("IDAccountSaving");
					this.OnIDAccountSavingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountSaving_totalSaving", Storage="_AccountSaving", ThisKey="IDAccountSaving", OtherKey="IDAccountSaving", IsForeignKey=true)]
		public AccountSaving AccountSaving
		{
			get
			{
				return this._AccountSaving.Entity;
			}
			set
			{
				AccountSaving previousValue = this._AccountSaving.Entity;
				if (((previousValue != value) 
							|| (this._AccountSaving.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountSaving.Entity = null;
						previousValue.totalSavings.Remove(this);
					}
					this._AccountSaving.Entity = value;
					if ((value != null))
					{
						value.totalSavings.Add(this);
						this._IDAccountSaving = value.IDAccountSaving;
					}
					else
					{
						this._IDAccountSaving = default(Nullable<long>);
					}
					this.SendPropertyChanged("AccountSaving");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_totalSaving", Storage="_Customer", ThisKey="IDCustomer", OtherKey="IDCustomer", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.totalSavings.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.totalSavings.Add(this);
						this._IDCustomer = value.IDCustomer;
					}
					else
					{
						this._IDCustomer = default(long);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountLongTime")]
	public partial class AccountLongTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IDAcountLongTime;
		
		private long _LongTimeCode;
		
		private System.Nullable<long> _Grist;
		
		private long _GuarantiTime;
		
		private System.Nullable<long> _IDCustomer;
		
		private System.Nullable<long> _amount;
		
		private EntitySet<Close> _Closes;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDAcountLongTimeChanging(long value);
    partial void OnIDAcountLongTimeChanged();
    partial void OnLongTimeCodeChanging(long value);
    partial void OnLongTimeCodeChanged();
    partial void OnGristChanging(System.Nullable<long> value);
    partial void OnGristChanged();
    partial void OnGuarantiTimeChanging(long value);
    partial void OnGuarantiTimeChanged();
    partial void OnIDCustomerChanging(System.Nullable<long> value);
    partial void OnIDCustomerChanged();
    partial void OnamountChanging(System.Nullable<long> value);
    partial void OnamountChanged();
    #endregion
		
		public AccountLongTime()
		{
			this._Closes = new EntitySet<Close>(new Action<Close>(this.attach_Closes), new Action<Close>(this.detach_Closes));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAcountLongTime", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IDAcountLongTime
		{
			get
			{
				return this._IDAcountLongTime;
			}
			set
			{
				if ((this._IDAcountLongTime != value))
				{
					this.OnIDAcountLongTimeChanging(value);
					this.SendPropertyChanging();
					this._IDAcountLongTime = value;
					this.SendPropertyChanged("IDAcountLongTime");
					this.OnIDAcountLongTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongTimeCode", DbType="BigInt NOT NULL")]
		public long LongTimeCode
		{
			get
			{
				return this._LongTimeCode;
			}
			set
			{
				if ((this._LongTimeCode != value))
				{
					this.OnLongTimeCodeChanging(value);
					this.SendPropertyChanging();
					this._LongTimeCode = value;
					this.SendPropertyChanged("LongTimeCode");
					this.OnLongTimeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grist", DbType="BigInt")]
		public System.Nullable<long> Grist
		{
			get
			{
				return this._Grist;
			}
			set
			{
				if ((this._Grist != value))
				{
					this.OnGristChanging(value);
					this.SendPropertyChanging();
					this._Grist = value;
					this.SendPropertyChanged("Grist");
					this.OnGristChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuarantiTime", DbType="BigInt NOT NULL")]
		public long GuarantiTime
		{
			get
			{
				return this._GuarantiTime;
			}
			set
			{
				if ((this._GuarantiTime != value))
				{
					this.OnGuarantiTimeChanging(value);
					this.SendPropertyChanging();
					this._GuarantiTime = value;
					this.SendPropertyChanged("GuarantiTime");
					this.OnGuarantiTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="BigInt")]
		public System.Nullable<long> IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="BigInt")]
		public System.Nullable<long> amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountLongTime_Close", Storage="_Closes", ThisKey="IDAcountLongTime", OtherKey="IDAccountLongtime")]
		public EntitySet<Close> Closes
		{
			get
			{
				return this._Closes;
			}
			set
			{
				this._Closes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_AccountLongTime", Storage="_Customer", ThisKey="IDCustomer", OtherKey="IDCustomer", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.AccountLongTimes.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.AccountLongTimes.Add(this);
						this._IDCustomer = value.IDCustomer;
					}
					else
					{
						this._IDCustomer = default(Nullable<long>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Closes(Close entity)
		{
			this.SendPropertyChanging();
			entity.AccountLongTime = this;
		}
		
		private void detach_Closes(Close entity)
		{
			this.SendPropertyChanging();
			entity.AccountLongTime = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountSaving")]
	public partial class AccountSaving : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IDAccountSaving;
		
		private long _savingCode;
		
		private bool _active;
		
		private System.Nullable<long> _IDcustomer;
		
		private System.Nullable<long> _amount;
		
		private EntitySet<totalSaving> _totalSavings;
		
		private EntitySet<Close> _Closes;
		
		private EntitySet<MoveCurrentToSaving> _MoveCurrentToSavings;
		
		private EntitySet<MoveSavingtoCurrent> _MoveSavingtoCurrents;
		
		private EntitySet<MoveSavingToShortTime> _MoveSavingToShortTimes;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDAccountSavingChanging(long value);
    partial void OnIDAccountSavingChanged();
    partial void OnsavingCodeChanging(long value);
    partial void OnsavingCodeChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnIDcustomerChanging(System.Nullable<long> value);
    partial void OnIDcustomerChanged();
    partial void OnamountChanging(System.Nullable<long> value);
    partial void OnamountChanged();
    #endregion
		
		public AccountSaving()
		{
			this._totalSavings = new EntitySet<totalSaving>(new Action<totalSaving>(this.attach_totalSavings), new Action<totalSaving>(this.detach_totalSavings));
			this._Closes = new EntitySet<Close>(new Action<Close>(this.attach_Closes), new Action<Close>(this.detach_Closes));
			this._MoveCurrentToSavings = new EntitySet<MoveCurrentToSaving>(new Action<MoveCurrentToSaving>(this.attach_MoveCurrentToSavings), new Action<MoveCurrentToSaving>(this.detach_MoveCurrentToSavings));
			this._MoveSavingtoCurrents = new EntitySet<MoveSavingtoCurrent>(new Action<MoveSavingtoCurrent>(this.attach_MoveSavingtoCurrents), new Action<MoveSavingtoCurrent>(this.detach_MoveSavingtoCurrents));
			this._MoveSavingToShortTimes = new EntitySet<MoveSavingToShortTime>(new Action<MoveSavingToShortTime>(this.attach_MoveSavingToShortTimes), new Action<MoveSavingToShortTime>(this.detach_MoveSavingToShortTimes));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAccountSaving", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IDAccountSaving
		{
			get
			{
				return this._IDAccountSaving;
			}
			set
			{
				if ((this._IDAccountSaving != value))
				{
					this.OnIDAccountSavingChanging(value);
					this.SendPropertyChanging();
					this._IDAccountSaving = value;
					this.SendPropertyChanged("IDAccountSaving");
					this.OnIDAccountSavingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_savingCode", DbType="BigInt NOT NULL")]
		public long savingCode
		{
			get
			{
				return this._savingCode;
			}
			set
			{
				if ((this._savingCode != value))
				{
					this.OnsavingCodeChanging(value);
					this.SendPropertyChanging();
					this._savingCode = value;
					this.SendPropertyChanged("savingCode");
					this.OnsavingCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDcustomer", DbType="BigInt")]
		public System.Nullable<long> IDcustomer
		{
			get
			{
				return this._IDcustomer;
			}
			set
			{
				if ((this._IDcustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDcustomerChanging(value);
					this.SendPropertyChanging();
					this._IDcustomer = value;
					this.SendPropertyChanged("IDcustomer");
					this.OnIDcustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="BigInt")]
		public System.Nullable<long> amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountSaving_totalSaving", Storage="_totalSavings", ThisKey="IDAccountSaving", OtherKey="IDAccountSaving")]
		public EntitySet<totalSaving> totalSavings
		{
			get
			{
				return this._totalSavings;
			}
			set
			{
				this._totalSavings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountSaving_Close", Storage="_Closes", ThisKey="IDAccountSaving", OtherKey="IDAccountSaving")]
		public EntitySet<Close> Closes
		{
			get
			{
				return this._Closes;
			}
			set
			{
				this._Closes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountSaving_MoveCurrentToSaving", Storage="_MoveCurrentToSavings", ThisKey="IDAccountSaving", OtherKey="IDSaving")]
		public EntitySet<MoveCurrentToSaving> MoveCurrentToSavings
		{
			get
			{
				return this._MoveCurrentToSavings;
			}
			set
			{
				this._MoveCurrentToSavings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountSaving_MoveSavingtoCurrent", Storage="_MoveSavingtoCurrents", ThisKey="IDAccountSaving", OtherKey="IDSaving")]
		public EntitySet<MoveSavingtoCurrent> MoveSavingtoCurrents
		{
			get
			{
				return this._MoveSavingtoCurrents;
			}
			set
			{
				this._MoveSavingtoCurrents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountSaving_MoveSavingToShortTime", Storage="_MoveSavingToShortTimes", ThisKey="IDAccountSaving", OtherKey="IDSaving")]
		public EntitySet<MoveSavingToShortTime> MoveSavingToShortTimes
		{
			get
			{
				return this._MoveSavingToShortTimes;
			}
			set
			{
				this._MoveSavingToShortTimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_AccountSaving", Storage="_Customer", ThisKey="IDcustomer", OtherKey="IDCustomer", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.AccountSavings.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.AccountSavings.Add(this);
						this._IDcustomer = value.IDCustomer;
					}
					else
					{
						this._IDcustomer = default(Nullable<long>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_totalSavings(totalSaving entity)
		{
			this.SendPropertyChanging();
			entity.AccountSaving = this;
		}
		
		private void detach_totalSavings(totalSaving entity)
		{
			this.SendPropertyChanging();
			entity.AccountSaving = null;
		}
		
		private void attach_Closes(Close entity)
		{
			this.SendPropertyChanging();
			entity.AccountSaving = this;
		}
		
		private void detach_Closes(Close entity)
		{
			this.SendPropertyChanging();
			entity.AccountSaving = null;
		}
		
		private void attach_MoveCurrentToSavings(MoveCurrentToSaving entity)
		{
			this.SendPropertyChanging();
			entity.AccountSaving = this;
		}
		
		private void detach_MoveCurrentToSavings(MoveCurrentToSaving entity)
		{
			this.SendPropertyChanging();
			entity.AccountSaving = null;
		}
		
		private void attach_MoveSavingtoCurrents(MoveSavingtoCurrent entity)
		{
			this.SendPropertyChanging();
			entity.AccountSaving = this;
		}
		
		private void detach_MoveSavingtoCurrents(MoveSavingtoCurrent entity)
		{
			this.SendPropertyChanging();
			entity.AccountSaving = null;
		}
		
		private void attach_MoveSavingToShortTimes(MoveSavingToShortTime entity)
		{
			this.SendPropertyChanging();
			entity.AccountSaving = this;
		}
		
		private void detach_MoveSavingToShortTimes(MoveSavingToShortTime entity)
		{
			this.SendPropertyChanging();
			entity.AccountSaving = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountShortTime")]
	public partial class AccountShortTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IDAccountShortTime;
		
		private long _GuarantiiTime;
		
		private long _Grist;
		
		private System.DateTime _Date;
		
		private long _ShortTimeCode;
		
		private System.Nullable<long> _IDcustomer;
		
		private System.Nullable<long> _amount;
		
		private EntitySet<Close> _Closes;
		
		private EntitySet<MoveSavingToShortTime> _MoveSavingToShortTimes;
		
		private EntitySet<MoveShortTimeToCurrent> _MoveShortTimeToCurrents;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDAccountShortTimeChanging(long value);
    partial void OnIDAccountShortTimeChanged();
    partial void OnGuarantiiTimeChanging(long value);
    partial void OnGuarantiiTimeChanged();
    partial void OnGristChanging(long value);
    partial void OnGristChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnShortTimeCodeChanging(long value);
    partial void OnShortTimeCodeChanged();
    partial void OnIDcustomerChanging(System.Nullable<long> value);
    partial void OnIDcustomerChanged();
    partial void OnamountChanging(System.Nullable<long> value);
    partial void OnamountChanged();
    #endregion
		
		public AccountShortTime()
		{
			this._Closes = new EntitySet<Close>(new Action<Close>(this.attach_Closes), new Action<Close>(this.detach_Closes));
			this._MoveSavingToShortTimes = new EntitySet<MoveSavingToShortTime>(new Action<MoveSavingToShortTime>(this.attach_MoveSavingToShortTimes), new Action<MoveSavingToShortTime>(this.detach_MoveSavingToShortTimes));
			this._MoveShortTimeToCurrents = new EntitySet<MoveShortTimeToCurrent>(new Action<MoveShortTimeToCurrent>(this.attach_MoveShortTimeToCurrents), new Action<MoveShortTimeToCurrent>(this.detach_MoveShortTimeToCurrents));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAccountShortTime", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IDAccountShortTime
		{
			get
			{
				return this._IDAccountShortTime;
			}
			set
			{
				if ((this._IDAccountShortTime != value))
				{
					this.OnIDAccountShortTimeChanging(value);
					this.SendPropertyChanging();
					this._IDAccountShortTime = value;
					this.SendPropertyChanged("IDAccountShortTime");
					this.OnIDAccountShortTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuarantiiTime", DbType="BigInt NOT NULL")]
		public long GuarantiiTime
		{
			get
			{
				return this._GuarantiiTime;
			}
			set
			{
				if ((this._GuarantiiTime != value))
				{
					this.OnGuarantiiTimeChanging(value);
					this.SendPropertyChanging();
					this._GuarantiiTime = value;
					this.SendPropertyChanged("GuarantiiTime");
					this.OnGuarantiiTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grist", DbType="BigInt NOT NULL")]
		public long Grist
		{
			get
			{
				return this._Grist;
			}
			set
			{
				if ((this._Grist != value))
				{
					this.OnGristChanging(value);
					this.SendPropertyChanging();
					this._Grist = value;
					this.SendPropertyChanged("Grist");
					this.OnGristChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortTimeCode", DbType="BigInt NOT NULL")]
		public long ShortTimeCode
		{
			get
			{
				return this._ShortTimeCode;
			}
			set
			{
				if ((this._ShortTimeCode != value))
				{
					this.OnShortTimeCodeChanging(value);
					this.SendPropertyChanging();
					this._ShortTimeCode = value;
					this.SendPropertyChanged("ShortTimeCode");
					this.OnShortTimeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDcustomer", DbType="BigInt")]
		public System.Nullable<long> IDcustomer
		{
			get
			{
				return this._IDcustomer;
			}
			set
			{
				if ((this._IDcustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDcustomerChanging(value);
					this.SendPropertyChanging();
					this._IDcustomer = value;
					this.SendPropertyChanged("IDcustomer");
					this.OnIDcustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="BigInt")]
		public System.Nullable<long> amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountShortTime_Close", Storage="_Closes", ThisKey="IDAccountShortTime", OtherKey="IDAccountShorttime")]
		public EntitySet<Close> Closes
		{
			get
			{
				return this._Closes;
			}
			set
			{
				this._Closes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountShortTime_MoveSavingToShortTime", Storage="_MoveSavingToShortTimes", ThisKey="IDAccountShortTime", OtherKey="IDShortTime")]
		public EntitySet<MoveSavingToShortTime> MoveSavingToShortTimes
		{
			get
			{
				return this._MoveSavingToShortTimes;
			}
			set
			{
				this._MoveSavingToShortTimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountShortTime_MoveShortTimeToCurrent", Storage="_MoveShortTimeToCurrents", ThisKey="IDAccountShortTime", OtherKey="IDShortTime")]
		public EntitySet<MoveShortTimeToCurrent> MoveShortTimeToCurrents
		{
			get
			{
				return this._MoveShortTimeToCurrents;
			}
			set
			{
				this._MoveShortTimeToCurrents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_AccountShortTime", Storage="_Customer", ThisKey="IDcustomer", OtherKey="IDCustomer", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.AccountShortTimes.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.AccountShortTimes.Add(this);
						this._IDcustomer = value.IDCustomer;
					}
					else
					{
						this._IDcustomer = default(Nullable<long>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Closes(Close entity)
		{
			this.SendPropertyChanging();
			entity.AccountShortTime = this;
		}
		
		private void detach_Closes(Close entity)
		{
			this.SendPropertyChanging();
			entity.AccountShortTime = null;
		}
		
		private void attach_MoveSavingToShortTimes(MoveSavingToShortTime entity)
		{
			this.SendPropertyChanging();
			entity.AccountShortTime = this;
		}
		
		private void detach_MoveSavingToShortTimes(MoveSavingToShortTime entity)
		{
			this.SendPropertyChanging();
			entity.AccountShortTime = null;
		}
		
		private void attach_MoveShortTimeToCurrents(MoveShortTimeToCurrent entity)
		{
			this.SendPropertyChanging();
			entity.AccountShortTime = this;
		}
		
		private void detach_MoveShortTimeToCurrents(MoveShortTimeToCurrent entity)
		{
			this.SendPropertyChanging();
			entity.AccountShortTime = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cheque")]
	public partial class cheque : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IDcheque;
		
		private string _payment;
		
		private int _cheque_;
		
		private long _amount;
		
		private string _cropper_name;
		
		private long _IDAccountCurrent;
		
		private System.DateTime _Cheque_date;
		
		private System.DateTime _cropper_Date;
		
		private EntitySet<BackCheque> _BackCheques;
		
		private EntityRef<AccountCurrent> _AccountCurrent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDchequeChanging(long value);
    partial void OnIDchequeChanged();
    partial void OnpaymentChanging(string value);
    partial void OnpaymentChanged();
    partial void Oncheque_Changing(int value);
    partial void Oncheque_Changed();
    partial void OnamountChanging(long value);
    partial void OnamountChanged();
    partial void Oncropper_nameChanging(string value);
    partial void Oncropper_nameChanged();
    partial void OnIDAccountCurrentChanging(long value);
    partial void OnIDAccountCurrentChanged();
    partial void OnCheque_dateChanging(System.DateTime value);
    partial void OnCheque_dateChanged();
    partial void Oncropper_DateChanging(System.DateTime value);
    partial void Oncropper_DateChanged();
    #endregion
		
		public cheque()
		{
			this._BackCheques = new EntitySet<BackCheque>(new Action<BackCheque>(this.attach_BackCheques), new Action<BackCheque>(this.detach_BackCheques));
			this._AccountCurrent = default(EntityRef<AccountCurrent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDcheque", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IDcheque
		{
			get
			{
				return this._IDcheque;
			}
			set
			{
				if ((this._IDcheque != value))
				{
					this.OnIDchequeChanging(value);
					this.SendPropertyChanging();
					this._IDcheque = value;
					this.SendPropertyChanged("IDcheque");
					this.OnIDchequeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_payment", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string payment
		{
			get
			{
				return this._payment;
			}
			set
			{
				if ((this._payment != value))
				{
					this.OnpaymentChanging(value);
					this.SendPropertyChanging();
					this._payment = value;
					this.SendPropertyChanged("payment");
					this.OnpaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="cheque#", Storage="_cheque_", DbType="Int NOT NULL")]
		public int cheque_
		{
			get
			{
				return this._cheque_;
			}
			set
			{
				if ((this._cheque_ != value))
				{
					this.Oncheque_Changing(value);
					this.SendPropertyChanging();
					this._cheque_ = value;
					this.SendPropertyChanged("cheque_");
					this.Oncheque_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="BigInt NOT NULL")]
		public long amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cropper_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string cropper_name
		{
			get
			{
				return this._cropper_name;
			}
			set
			{
				if ((this._cropper_name != value))
				{
					this.Oncropper_nameChanging(value);
					this.SendPropertyChanging();
					this._cropper_name = value;
					this.SendPropertyChanged("cropper_name");
					this.Oncropper_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAccountCurrent", DbType="BigInt NOT NULL")]
		public long IDAccountCurrent
		{
			get
			{
				return this._IDAccountCurrent;
			}
			set
			{
				if ((this._IDAccountCurrent != value))
				{
					if (this._AccountCurrent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAccountCurrentChanging(value);
					this.SendPropertyChanging();
					this._IDAccountCurrent = value;
					this.SendPropertyChanged("IDAccountCurrent");
					this.OnIDAccountCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cheque_date", DbType="Date NOT NULL")]
		public System.DateTime Cheque_date
		{
			get
			{
				return this._Cheque_date;
			}
			set
			{
				if ((this._Cheque_date != value))
				{
					this.OnCheque_dateChanging(value);
					this.SendPropertyChanging();
					this._Cheque_date = value;
					this.SendPropertyChanged("Cheque_date");
					this.OnCheque_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cropper_Date", DbType="Date NOT NULL")]
		public System.DateTime cropper_Date
		{
			get
			{
				return this._cropper_Date;
			}
			set
			{
				if ((this._cropper_Date != value))
				{
					this.Oncropper_DateChanging(value);
					this.SendPropertyChanging();
					this._cropper_Date = value;
					this.SendPropertyChanged("cropper_Date");
					this.Oncropper_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cheque_BackCheque", Storage="_BackCheques", ThisKey="IDcheque", OtherKey="IDcheque")]
		public EntitySet<BackCheque> BackCheques
		{
			get
			{
				return this._BackCheques;
			}
			set
			{
				this._BackCheques.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCurrent_cheque", Storage="_AccountCurrent", ThisKey="IDAccountCurrent", OtherKey="IDAccountCurrent", IsForeignKey=true)]
		public AccountCurrent AccountCurrent
		{
			get
			{
				return this._AccountCurrent.Entity;
			}
			set
			{
				AccountCurrent previousValue = this._AccountCurrent.Entity;
				if (((previousValue != value) 
							|| (this._AccountCurrent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountCurrent.Entity = null;
						previousValue.cheques.Remove(this);
					}
					this._AccountCurrent.Entity = value;
					if ((value != null))
					{
						value.cheques.Add(this);
						this._IDAccountCurrent = value.IDAccountCurrent;
					}
					else
					{
						this._IDAccountCurrent = default(long);
					}
					this.SendPropertyChanged("AccountCurrent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BackCheques(BackCheque entity)
		{
			this.SendPropertyChanging();
			entity.cheque = this;
		}
		
		private void detach_BackCheques(BackCheque entity)
		{
			this.SendPropertyChanging();
			entity.cheque = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Close]")]
	public partial class Close : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IDClose;
		
		private System.Nullable<long> _IDAccountCurrent;
		
		private System.Nullable<long> _IDAccountSaving;
		
		private System.Nullable<long> _IDAccountLongtime;
		
		private System.Nullable<long> _IDAccountShorttime;
		
		private long _IDCustomer;
		
		private EntityRef<AccountCurrent> _AccountCurrent;
		
		private EntityRef<AccountLongTime> _AccountLongTime;
		
		private EntityRef<AccountSaving> _AccountSaving;
		
		private EntityRef<AccountShortTime> _AccountShortTime;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCloseChanging(long value);
    partial void OnIDCloseChanged();
    partial void OnIDAccountCurrentChanging(System.Nullable<long> value);
    partial void OnIDAccountCurrentChanged();
    partial void OnIDAccountSavingChanging(System.Nullable<long> value);
    partial void OnIDAccountSavingChanged();
    partial void OnIDAccountLongtimeChanging(System.Nullable<long> value);
    partial void OnIDAccountLongtimeChanged();
    partial void OnIDAccountShorttimeChanging(System.Nullable<long> value);
    partial void OnIDAccountShorttimeChanged();
    partial void OnIDCustomerChanging(long value);
    partial void OnIDCustomerChanged();
    #endregion
		
		public Close()
		{
			this._AccountCurrent = default(EntityRef<AccountCurrent>);
			this._AccountLongTime = default(EntityRef<AccountLongTime>);
			this._AccountSaving = default(EntityRef<AccountSaving>);
			this._AccountShortTime = default(EntityRef<AccountShortTime>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDClose", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IDClose
		{
			get
			{
				return this._IDClose;
			}
			set
			{
				if ((this._IDClose != value))
				{
					this.OnIDCloseChanging(value);
					this.SendPropertyChanging();
					this._IDClose = value;
					this.SendPropertyChanged("IDClose");
					this.OnIDCloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAccountCurrent", DbType="BigInt")]
		public System.Nullable<long> IDAccountCurrent
		{
			get
			{
				return this._IDAccountCurrent;
			}
			set
			{
				if ((this._IDAccountCurrent != value))
				{
					if (this._AccountCurrent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAccountCurrentChanging(value);
					this.SendPropertyChanging();
					this._IDAccountCurrent = value;
					this.SendPropertyChanged("IDAccountCurrent");
					this.OnIDAccountCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAccountSaving", DbType="BigInt")]
		public System.Nullable<long> IDAccountSaving
		{
			get
			{
				return this._IDAccountSaving;
			}
			set
			{
				if ((this._IDAccountSaving != value))
				{
					if (this._AccountSaving.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAccountSavingChanging(value);
					this.SendPropertyChanging();
					this._IDAccountSaving = value;
					this.SendPropertyChanged("IDAccountSaving");
					this.OnIDAccountSavingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAccountLongtime", DbType="BigInt")]
		public System.Nullable<long> IDAccountLongtime
		{
			get
			{
				return this._IDAccountLongtime;
			}
			set
			{
				if ((this._IDAccountLongtime != value))
				{
					if (this._AccountLongTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAccountLongtimeChanging(value);
					this.SendPropertyChanging();
					this._IDAccountLongtime = value;
					this.SendPropertyChanged("IDAccountLongtime");
					this.OnIDAccountLongtimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAccountShorttime", DbType="BigInt")]
		public System.Nullable<long> IDAccountShorttime
		{
			get
			{
				return this._IDAccountShorttime;
			}
			set
			{
				if ((this._IDAccountShorttime != value))
				{
					if (this._AccountShortTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAccountShorttimeChanging(value);
					this.SendPropertyChanging();
					this._IDAccountShorttime = value;
					this.SendPropertyChanged("IDAccountShorttime");
					this.OnIDAccountShorttimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="BigInt NOT NULL")]
		public long IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCurrent_Close", Storage="_AccountCurrent", ThisKey="IDAccountCurrent", OtherKey="IDAccountCurrent", IsForeignKey=true)]
		public AccountCurrent AccountCurrent
		{
			get
			{
				return this._AccountCurrent.Entity;
			}
			set
			{
				AccountCurrent previousValue = this._AccountCurrent.Entity;
				if (((previousValue != value) 
							|| (this._AccountCurrent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountCurrent.Entity = null;
						previousValue.Closes.Remove(this);
					}
					this._AccountCurrent.Entity = value;
					if ((value != null))
					{
						value.Closes.Add(this);
						this._IDAccountCurrent = value.IDAccountCurrent;
					}
					else
					{
						this._IDAccountCurrent = default(Nullable<long>);
					}
					this.SendPropertyChanged("AccountCurrent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountLongTime_Close", Storage="_AccountLongTime", ThisKey="IDAccountLongtime", OtherKey="IDAcountLongTime", IsForeignKey=true)]
		public AccountLongTime AccountLongTime
		{
			get
			{
				return this._AccountLongTime.Entity;
			}
			set
			{
				AccountLongTime previousValue = this._AccountLongTime.Entity;
				if (((previousValue != value) 
							|| (this._AccountLongTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountLongTime.Entity = null;
						previousValue.Closes.Remove(this);
					}
					this._AccountLongTime.Entity = value;
					if ((value != null))
					{
						value.Closes.Add(this);
						this._IDAccountLongtime = value.IDAcountLongTime;
					}
					else
					{
						this._IDAccountLongtime = default(Nullable<long>);
					}
					this.SendPropertyChanged("AccountLongTime");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountSaving_Close", Storage="_AccountSaving", ThisKey="IDAccountSaving", OtherKey="IDAccountSaving", IsForeignKey=true)]
		public AccountSaving AccountSaving
		{
			get
			{
				return this._AccountSaving.Entity;
			}
			set
			{
				AccountSaving previousValue = this._AccountSaving.Entity;
				if (((previousValue != value) 
							|| (this._AccountSaving.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountSaving.Entity = null;
						previousValue.Closes.Remove(this);
					}
					this._AccountSaving.Entity = value;
					if ((value != null))
					{
						value.Closes.Add(this);
						this._IDAccountSaving = value.IDAccountSaving;
					}
					else
					{
						this._IDAccountSaving = default(Nullable<long>);
					}
					this.SendPropertyChanged("AccountSaving");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountShortTime_Close", Storage="_AccountShortTime", ThisKey="IDAccountShorttime", OtherKey="IDAccountShortTime", IsForeignKey=true)]
		public AccountShortTime AccountShortTime
		{
			get
			{
				return this._AccountShortTime.Entity;
			}
			set
			{
				AccountShortTime previousValue = this._AccountShortTime.Entity;
				if (((previousValue != value) 
							|| (this._AccountShortTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountShortTime.Entity = null;
						previousValue.Closes.Remove(this);
					}
					this._AccountShortTime.Entity = value;
					if ((value != null))
					{
						value.Closes.Add(this);
						this._IDAccountShorttime = value.IDAccountShortTime;
					}
					else
					{
						this._IDAccountShorttime = default(Nullable<long>);
					}
					this.SendPropertyChanged("AccountShortTime");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Close", Storage="_Customer", ThisKey="IDCustomer", OtherKey="IDCustomer", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Closes.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Closes.Add(this);
						this._IDCustomer = value.IDCustomer;
					}
					else
					{
						this._IDCustomer = default(long);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IDCustomer;
		
		private long _CustomerCode;
		
		private long _NationalCode;
		
		private string _Name;
		
		private string _Family;
		
		private string _FatherName;
		
		private System.DateTime _BirthDay;
		
		private string _Emissionlocation;
		
		private string _AddHome;
		
		private string _AddWork;
		
		private System.Data.Linq.Binary _identifyrecognition;
		
		private System.Data.Linq.Binary _endorsement;
		
		private System.Nullable<long> _CustomerPass;
		
		private System.Nullable<long> _MobileNumber;
		
		private System.Nullable<long> _TellHome;
		
		private System.Nullable<long> _TellWork;
		
		private EntitySet<AccountCurrent> _AccountCurrents;
		
		private EntitySet<totalSaving> _totalSavings;
		
		private EntitySet<AccountLongTime> _AccountLongTimes;
		
		private EntitySet<AccountSaving> _AccountSavings;
		
		private EntitySet<AccountShortTime> _AccountShortTimes;
		
		private EntitySet<Close> _Closes;
		
		private EntitySet<RequestCheque> _RequestCheques;
		
		private EntitySet<totalCurrent> _totalCurrents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCustomerChanging(long value);
    partial void OnIDCustomerChanged();
    partial void OnCustomerCodeChanging(long value);
    partial void OnCustomerCodeChanged();
    partial void OnNationalCodeChanging(long value);
    partial void OnNationalCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFamilyChanging(string value);
    partial void OnFamilyChanged();
    partial void OnFatherNameChanging(string value);
    partial void OnFatherNameChanged();
    partial void OnBirthDayChanging(System.DateTime value);
    partial void OnBirthDayChanged();
    partial void OnEmissionlocationChanging(string value);
    partial void OnEmissionlocationChanged();
    partial void OnAddHomeChanging(string value);
    partial void OnAddHomeChanged();
    partial void OnAddWorkChanging(string value);
    partial void OnAddWorkChanged();
    partial void OnidentifyrecognitionChanging(System.Data.Linq.Binary value);
    partial void OnidentifyrecognitionChanged();
    partial void OnendorsementChanging(System.Data.Linq.Binary value);
    partial void OnendorsementChanged();
    partial void OnCustomerPassChanging(System.Nullable<long> value);
    partial void OnCustomerPassChanged();
    partial void OnMobileNumberChanging(System.Nullable<long> value);
    partial void OnMobileNumberChanged();
    partial void OnTellHomeChanging(System.Nullable<long> value);
    partial void OnTellHomeChanged();
    partial void OnTellWorkChanging(System.Nullable<long> value);
    partial void OnTellWorkChanged();
    #endregion
		
		public Customer()
		{
			this._AccountCurrents = new EntitySet<AccountCurrent>(new Action<AccountCurrent>(this.attach_AccountCurrents), new Action<AccountCurrent>(this.detach_AccountCurrents));
			this._totalSavings = new EntitySet<totalSaving>(new Action<totalSaving>(this.attach_totalSavings), new Action<totalSaving>(this.detach_totalSavings));
			this._AccountLongTimes = new EntitySet<AccountLongTime>(new Action<AccountLongTime>(this.attach_AccountLongTimes), new Action<AccountLongTime>(this.detach_AccountLongTimes));
			this._AccountSavings = new EntitySet<AccountSaving>(new Action<AccountSaving>(this.attach_AccountSavings), new Action<AccountSaving>(this.detach_AccountSavings));
			this._AccountShortTimes = new EntitySet<AccountShortTime>(new Action<AccountShortTime>(this.attach_AccountShortTimes), new Action<AccountShortTime>(this.detach_AccountShortTimes));
			this._Closes = new EntitySet<Close>(new Action<Close>(this.attach_Closes), new Action<Close>(this.detach_Closes));
			this._RequestCheques = new EntitySet<RequestCheque>(new Action<RequestCheque>(this.attach_RequestCheques), new Action<RequestCheque>(this.detach_RequestCheques));
			this._totalCurrents = new EntitySet<totalCurrent>(new Action<totalCurrent>(this.attach_totalCurrents), new Action<totalCurrent>(this.detach_totalCurrents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerCode", DbType="BigInt NOT NULL")]
		public long CustomerCode
		{
			get
			{
				return this._CustomerCode;
			}
			set
			{
				if ((this._CustomerCode != value))
				{
					this.OnCustomerCodeChanging(value);
					this.SendPropertyChanging();
					this._CustomerCode = value;
					this.SendPropertyChanged("CustomerCode");
					this.OnCustomerCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalCode", DbType="BigInt NOT NULL")]
		public long NationalCode
		{
			get
			{
				return this._NationalCode;
			}
			set
			{
				if ((this._NationalCode != value))
				{
					this.OnNationalCodeChanging(value);
					this.SendPropertyChanging();
					this._NationalCode = value;
					this.SendPropertyChanged("NationalCode");
					this.OnNationalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Family", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Family
		{
			get
			{
				return this._Family;
			}
			set
			{
				if ((this._Family != value))
				{
					this.OnFamilyChanging(value);
					this.SendPropertyChanging();
					this._Family = value;
					this.SendPropertyChanged("Family");
					this.OnFamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherName", DbType="NVarChar(30)")]
		public string FatherName
		{
			get
			{
				return this._FatherName;
			}
			set
			{
				if ((this._FatherName != value))
				{
					this.OnFatherNameChanging(value);
					this.SendPropertyChanging();
					this._FatherName = value;
					this.SendPropertyChanged("FatherName");
					this.OnFatherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDay", DbType="Date NOT NULL")]
		public System.DateTime BirthDay
		{
			get
			{
				return this._BirthDay;
			}
			set
			{
				if ((this._BirthDay != value))
				{
					this.OnBirthDayChanging(value);
					this.SendPropertyChanging();
					this._BirthDay = value;
					this.SendPropertyChanged("BirthDay");
					this.OnBirthDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emissionlocation", DbType="NVarChar(20)")]
		public string Emissionlocation
		{
			get
			{
				return this._Emissionlocation;
			}
			set
			{
				if ((this._Emissionlocation != value))
				{
					this.OnEmissionlocationChanging(value);
					this.SendPropertyChanging();
					this._Emissionlocation = value;
					this.SendPropertyChanged("Emissionlocation");
					this.OnEmissionlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddHome", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AddHome
		{
			get
			{
				return this._AddHome;
			}
			set
			{
				if ((this._AddHome != value))
				{
					this.OnAddHomeChanging(value);
					this.SendPropertyChanging();
					this._AddHome = value;
					this.SendPropertyChanged("AddHome");
					this.OnAddHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddWork", DbType="NVarChar(50)")]
		public string AddWork
		{
			get
			{
				return this._AddWork;
			}
			set
			{
				if ((this._AddWork != value))
				{
					this.OnAddWorkChanging(value);
					this.SendPropertyChanging();
					this._AddWork = value;
					this.SendPropertyChanged("AddWork");
					this.OnAddWorkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_identifyrecognition", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary identifyrecognition
		{
			get
			{
				return this._identifyrecognition;
			}
			set
			{
				if ((this._identifyrecognition != value))
				{
					this.OnidentifyrecognitionChanging(value);
					this.SendPropertyChanging();
					this._identifyrecognition = value;
					this.SendPropertyChanged("identifyrecognition");
					this.OnidentifyrecognitionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endorsement", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary endorsement
		{
			get
			{
				return this._endorsement;
			}
			set
			{
				if ((this._endorsement != value))
				{
					this.OnendorsementChanging(value);
					this.SendPropertyChanging();
					this._endorsement = value;
					this.SendPropertyChanged("endorsement");
					this.OnendorsementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPass", DbType="BigInt")]
		public System.Nullable<long> CustomerPass
		{
			get
			{
				return this._CustomerPass;
			}
			set
			{
				if ((this._CustomerPass != value))
				{
					this.OnCustomerPassChanging(value);
					this.SendPropertyChanging();
					this._CustomerPass = value;
					this.SendPropertyChanged("CustomerPass");
					this.OnCustomerPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileNumber", DbType="BigInt")]
		public System.Nullable<long> MobileNumber
		{
			get
			{
				return this._MobileNumber;
			}
			set
			{
				if ((this._MobileNumber != value))
				{
					this.OnMobileNumberChanging(value);
					this.SendPropertyChanging();
					this._MobileNumber = value;
					this.SendPropertyChanged("MobileNumber");
					this.OnMobileNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TellHome", DbType="BigInt")]
		public System.Nullable<long> TellHome
		{
			get
			{
				return this._TellHome;
			}
			set
			{
				if ((this._TellHome != value))
				{
					this.OnTellHomeChanging(value);
					this.SendPropertyChanging();
					this._TellHome = value;
					this.SendPropertyChanged("TellHome");
					this.OnTellHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TellWork", DbType="BigInt")]
		public System.Nullable<long> TellWork
		{
			get
			{
				return this._TellWork;
			}
			set
			{
				if ((this._TellWork != value))
				{
					this.OnTellWorkChanging(value);
					this.SendPropertyChanging();
					this._TellWork = value;
					this.SendPropertyChanged("TellWork");
					this.OnTellWorkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_AccountCurrent", Storage="_AccountCurrents", ThisKey="IDCustomer", OtherKey="IDcustomer")]
		public EntitySet<AccountCurrent> AccountCurrents
		{
			get
			{
				return this._AccountCurrents;
			}
			set
			{
				this._AccountCurrents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_totalSaving", Storage="_totalSavings", ThisKey="IDCustomer", OtherKey="IDCustomer")]
		public EntitySet<totalSaving> totalSavings
		{
			get
			{
				return this._totalSavings;
			}
			set
			{
				this._totalSavings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_AccountLongTime", Storage="_AccountLongTimes", ThisKey="IDCustomer", OtherKey="IDCustomer")]
		public EntitySet<AccountLongTime> AccountLongTimes
		{
			get
			{
				return this._AccountLongTimes;
			}
			set
			{
				this._AccountLongTimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_AccountSaving", Storage="_AccountSavings", ThisKey="IDCustomer", OtherKey="IDcustomer")]
		public EntitySet<AccountSaving> AccountSavings
		{
			get
			{
				return this._AccountSavings;
			}
			set
			{
				this._AccountSavings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_AccountShortTime", Storage="_AccountShortTimes", ThisKey="IDCustomer", OtherKey="IDcustomer")]
		public EntitySet<AccountShortTime> AccountShortTimes
		{
			get
			{
				return this._AccountShortTimes;
			}
			set
			{
				this._AccountShortTimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Close", Storage="_Closes", ThisKey="IDCustomer", OtherKey="IDCustomer")]
		public EntitySet<Close> Closes
		{
			get
			{
				return this._Closes;
			}
			set
			{
				this._Closes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_RequestCheque", Storage="_RequestCheques", ThisKey="IDCustomer", OtherKey="IDCustomer")]
		public EntitySet<RequestCheque> RequestCheques
		{
			get
			{
				return this._RequestCheques;
			}
			set
			{
				this._RequestCheques.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_totalCurrent", Storage="_totalCurrents", ThisKey="IDCustomer", OtherKey="IDCustomer")]
		public EntitySet<totalCurrent> totalCurrents
		{
			get
			{
				return this._totalCurrents;
			}
			set
			{
				this._totalCurrents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountCurrents(AccountCurrent entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_AccountCurrents(AccountCurrent entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_totalSavings(totalSaving entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_totalSavings(totalSaving entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_AccountLongTimes(AccountLongTime entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_AccountLongTimes(AccountLongTime entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_AccountSavings(AccountSaving entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_AccountSavings(AccountSaving entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_AccountShortTimes(AccountShortTime entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_AccountShortTimes(AccountShortTime entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Closes(Close entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Closes(Close entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_RequestCheques(RequestCheque entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_RequestCheques(RequestCheque entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_totalCurrents(totalCurrent entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_totalCurrents(totalCurrent entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employ")]
	public partial class Employ : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IDEmploy;
		
		private string _name;
		
		private string _lastname;
		
		private long _personalcode;
		
		private string _position;
		
		private long _EmployPass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDEmployChanging(long value);
    partial void OnIDEmployChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnpersonalcodeChanging(long value);
    partial void OnpersonalcodeChanged();
    partial void OnpositionChanging(string value);
    partial void OnpositionChanged();
    partial void OnEmployPassChanging(long value);
    partial void OnEmployPassChanged();
    #endregion
		
		public Employ()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEmploy", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IDEmploy
		{
			get
			{
				return this._IDEmploy;
			}
			set
			{
				if ((this._IDEmploy != value))
				{
					this.OnIDEmployChanging(value);
					this.SendPropertyChanging();
					this._IDEmploy = value;
					this.SendPropertyChanged("IDEmploy");
					this.OnIDEmployChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personalcode", DbType="BigInt NOT NULL")]
		public long personalcode
		{
			get
			{
				return this._personalcode;
			}
			set
			{
				if ((this._personalcode != value))
				{
					this.OnpersonalcodeChanging(value);
					this.SendPropertyChanging();
					this._personalcode = value;
					this.SendPropertyChanged("personalcode");
					this.OnpersonalcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployPass", DbType="BigInt NOT NULL")]
		public long EmployPass
		{
			get
			{
				return this._EmployPass;
			}
			set
			{
				if ((this._EmployPass != value))
				{
					this.OnEmployPassChanging(value);
					this.SendPropertyChanging();
					this._EmployPass = value;
					this.SendPropertyChanged("EmployPass");
					this.OnEmployPassChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MoveCurrentToSaving")]
	public partial class MoveCurrentToSaving : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IDMoveCurrentToSaving;
		
		private long _IDSaving;
		
		private long _IDCurrent;
		
		private long _AmountMove;
		
		private System.DateTime _DateMove;
		
		private EntityRef<AccountCurrent> _AccountCurrent;
		
		private EntityRef<AccountSaving> _AccountSaving;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMoveCurrentToSavingChanging(long value);
    partial void OnIDMoveCurrentToSavingChanged();
    partial void OnIDSavingChanging(long value);
    partial void OnIDSavingChanged();
    partial void OnIDCurrentChanging(long value);
    partial void OnIDCurrentChanged();
    partial void OnAmountMoveChanging(long value);
    partial void OnAmountMoveChanged();
    partial void OnDateMoveChanging(System.DateTime value);
    partial void OnDateMoveChanged();
    #endregion
		
		public MoveCurrentToSaving()
		{
			this._AccountCurrent = default(EntityRef<AccountCurrent>);
			this._AccountSaving = default(EntityRef<AccountSaving>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMoveCurrentToSaving", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IDMoveCurrentToSaving
		{
			get
			{
				return this._IDMoveCurrentToSaving;
			}
			set
			{
				if ((this._IDMoveCurrentToSaving != value))
				{
					this.OnIDMoveCurrentToSavingChanging(value);
					this.SendPropertyChanging();
					this._IDMoveCurrentToSaving = value;
					this.SendPropertyChanged("IDMoveCurrentToSaving");
					this.OnIDMoveCurrentToSavingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSaving", DbType="BigInt NOT NULL")]
		public long IDSaving
		{
			get
			{
				return this._IDSaving;
			}
			set
			{
				if ((this._IDSaving != value))
				{
					if (this._AccountSaving.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSavingChanging(value);
					this.SendPropertyChanging();
					this._IDSaving = value;
					this.SendPropertyChanged("IDSaving");
					this.OnIDSavingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCurrent", DbType="BigInt NOT NULL")]
		public long IDCurrent
		{
			get
			{
				return this._IDCurrent;
			}
			set
			{
				if ((this._IDCurrent != value))
				{
					if (this._AccountCurrent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCurrentChanging(value);
					this.SendPropertyChanging();
					this._IDCurrent = value;
					this.SendPropertyChanged("IDCurrent");
					this.OnIDCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountMove", DbType="BigInt NOT NULL")]
		public long AmountMove
		{
			get
			{
				return this._AmountMove;
			}
			set
			{
				if ((this._AmountMove != value))
				{
					this.OnAmountMoveChanging(value);
					this.SendPropertyChanging();
					this._AmountMove = value;
					this.SendPropertyChanged("AmountMove");
					this.OnAmountMoveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateMove", DbType="Date NOT NULL")]
		public System.DateTime DateMove
		{
			get
			{
				return this._DateMove;
			}
			set
			{
				if ((this._DateMove != value))
				{
					this.OnDateMoveChanging(value);
					this.SendPropertyChanging();
					this._DateMove = value;
					this.SendPropertyChanged("DateMove");
					this.OnDateMoveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCurrent_MoveCurrentToSaving", Storage="_AccountCurrent", ThisKey="IDCurrent", OtherKey="IDAccountCurrent", IsForeignKey=true)]
		public AccountCurrent AccountCurrent
		{
			get
			{
				return this._AccountCurrent.Entity;
			}
			set
			{
				AccountCurrent previousValue = this._AccountCurrent.Entity;
				if (((previousValue != value) 
							|| (this._AccountCurrent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountCurrent.Entity = null;
						previousValue.MoveCurrentToSavings.Remove(this);
					}
					this._AccountCurrent.Entity = value;
					if ((value != null))
					{
						value.MoveCurrentToSavings.Add(this);
						this._IDCurrent = value.IDAccountCurrent;
					}
					else
					{
						this._IDCurrent = default(long);
					}
					this.SendPropertyChanged("AccountCurrent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountSaving_MoveCurrentToSaving", Storage="_AccountSaving", ThisKey="IDSaving", OtherKey="IDAccountSaving", IsForeignKey=true)]
		public AccountSaving AccountSaving
		{
			get
			{
				return this._AccountSaving.Entity;
			}
			set
			{
				AccountSaving previousValue = this._AccountSaving.Entity;
				if (((previousValue != value) 
							|| (this._AccountSaving.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountSaving.Entity = null;
						previousValue.MoveCurrentToSavings.Remove(this);
					}
					this._AccountSaving.Entity = value;
					if ((value != null))
					{
						value.MoveCurrentToSavings.Add(this);
						this._IDSaving = value.IDAccountSaving;
					}
					else
					{
						this._IDSaving = default(long);
					}
					this.SendPropertyChanged("AccountSaving");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MoveSavingtoCurrent")]
	public partial class MoveSavingtoCurrent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IDMoveSavingtoCurrent;
		
		private long _IDSaving;
		
		private long _IDCurrent;
		
		private long _AmountMove;
		
		private System.DateTime _DateMove;
		
		private EntityRef<AccountCurrent> _AccountCurrent;
		
		private EntityRef<AccountSaving> _AccountSaving;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMoveSavingtoCurrentChanging(long value);
    partial void OnIDMoveSavingtoCurrentChanged();
    partial void OnIDSavingChanging(long value);
    partial void OnIDSavingChanged();
    partial void OnIDCurrentChanging(long value);
    partial void OnIDCurrentChanged();
    partial void OnAmountMoveChanging(long value);
    partial void OnAmountMoveChanged();
    partial void OnDateMoveChanging(System.DateTime value);
    partial void OnDateMoveChanged();
    #endregion
		
		public MoveSavingtoCurrent()
		{
			this._AccountCurrent = default(EntityRef<AccountCurrent>);
			this._AccountSaving = default(EntityRef<AccountSaving>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMoveSavingtoCurrent", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IDMoveSavingtoCurrent
		{
			get
			{
				return this._IDMoveSavingtoCurrent;
			}
			set
			{
				if ((this._IDMoveSavingtoCurrent != value))
				{
					this.OnIDMoveSavingtoCurrentChanging(value);
					this.SendPropertyChanging();
					this._IDMoveSavingtoCurrent = value;
					this.SendPropertyChanged("IDMoveSavingtoCurrent");
					this.OnIDMoveSavingtoCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSaving", DbType="BigInt NOT NULL")]
		public long IDSaving
		{
			get
			{
				return this._IDSaving;
			}
			set
			{
				if ((this._IDSaving != value))
				{
					if (this._AccountSaving.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSavingChanging(value);
					this.SendPropertyChanging();
					this._IDSaving = value;
					this.SendPropertyChanged("IDSaving");
					this.OnIDSavingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCurrent", DbType="BigInt NOT NULL")]
		public long IDCurrent
		{
			get
			{
				return this._IDCurrent;
			}
			set
			{
				if ((this._IDCurrent != value))
				{
					if (this._AccountCurrent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCurrentChanging(value);
					this.SendPropertyChanging();
					this._IDCurrent = value;
					this.SendPropertyChanged("IDCurrent");
					this.OnIDCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountMove", DbType="BigInt NOT NULL")]
		public long AmountMove
		{
			get
			{
				return this._AmountMove;
			}
			set
			{
				if ((this._AmountMove != value))
				{
					this.OnAmountMoveChanging(value);
					this.SendPropertyChanging();
					this._AmountMove = value;
					this.SendPropertyChanged("AmountMove");
					this.OnAmountMoveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateMove", DbType="Date NOT NULL")]
		public System.DateTime DateMove
		{
			get
			{
				return this._DateMove;
			}
			set
			{
				if ((this._DateMove != value))
				{
					this.OnDateMoveChanging(value);
					this.SendPropertyChanging();
					this._DateMove = value;
					this.SendPropertyChanged("DateMove");
					this.OnDateMoveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCurrent_MoveSavingtoCurrent", Storage="_AccountCurrent", ThisKey="IDCurrent", OtherKey="IDAccountCurrent", IsForeignKey=true)]
		public AccountCurrent AccountCurrent
		{
			get
			{
				return this._AccountCurrent.Entity;
			}
			set
			{
				AccountCurrent previousValue = this._AccountCurrent.Entity;
				if (((previousValue != value) 
							|| (this._AccountCurrent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountCurrent.Entity = null;
						previousValue.MoveSavingtoCurrents.Remove(this);
					}
					this._AccountCurrent.Entity = value;
					if ((value != null))
					{
						value.MoveSavingtoCurrents.Add(this);
						this._IDCurrent = value.IDAccountCurrent;
					}
					else
					{
						this._IDCurrent = default(long);
					}
					this.SendPropertyChanged("AccountCurrent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountSaving_MoveSavingtoCurrent", Storage="_AccountSaving", ThisKey="IDSaving", OtherKey="IDAccountSaving", IsForeignKey=true)]
		public AccountSaving AccountSaving
		{
			get
			{
				return this._AccountSaving.Entity;
			}
			set
			{
				AccountSaving previousValue = this._AccountSaving.Entity;
				if (((previousValue != value) 
							|| (this._AccountSaving.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountSaving.Entity = null;
						previousValue.MoveSavingtoCurrents.Remove(this);
					}
					this._AccountSaving.Entity = value;
					if ((value != null))
					{
						value.MoveSavingtoCurrents.Add(this);
						this._IDSaving = value.IDAccountSaving;
					}
					else
					{
						this._IDSaving = default(long);
					}
					this.SendPropertyChanged("AccountSaving");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MoveSavingToShortTime")]
	public partial class MoveSavingToShortTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IDMoveShortTimeToSaving;
		
		private long _IDSaving;
		
		private long _IDShortTime;
		
		private long _AmountMove;
		
		private System.DateTime _DateMove;
		
		private EntityRef<AccountSaving> _AccountSaving;
		
		private EntityRef<AccountShortTime> _AccountShortTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMoveShortTimeToSavingChanging(long value);
    partial void OnIDMoveShortTimeToSavingChanged();
    partial void OnIDSavingChanging(long value);
    partial void OnIDSavingChanged();
    partial void OnIDShortTimeChanging(long value);
    partial void OnIDShortTimeChanged();
    partial void OnAmountMoveChanging(long value);
    partial void OnAmountMoveChanged();
    partial void OnDateMoveChanging(System.DateTime value);
    partial void OnDateMoveChanged();
    #endregion
		
		public MoveSavingToShortTime()
		{
			this._AccountSaving = default(EntityRef<AccountSaving>);
			this._AccountShortTime = default(EntityRef<AccountShortTime>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMoveShortTimeToSaving", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IDMoveShortTimeToSaving
		{
			get
			{
				return this._IDMoveShortTimeToSaving;
			}
			set
			{
				if ((this._IDMoveShortTimeToSaving != value))
				{
					this.OnIDMoveShortTimeToSavingChanging(value);
					this.SendPropertyChanging();
					this._IDMoveShortTimeToSaving = value;
					this.SendPropertyChanged("IDMoveShortTimeToSaving");
					this.OnIDMoveShortTimeToSavingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSaving", DbType="BigInt NOT NULL")]
		public long IDSaving
		{
			get
			{
				return this._IDSaving;
			}
			set
			{
				if ((this._IDSaving != value))
				{
					if (this._AccountSaving.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSavingChanging(value);
					this.SendPropertyChanging();
					this._IDSaving = value;
					this.SendPropertyChanged("IDSaving");
					this.OnIDSavingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDShortTime", DbType="BigInt NOT NULL")]
		public long IDShortTime
		{
			get
			{
				return this._IDShortTime;
			}
			set
			{
				if ((this._IDShortTime != value))
				{
					if (this._AccountShortTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDShortTimeChanging(value);
					this.SendPropertyChanging();
					this._IDShortTime = value;
					this.SendPropertyChanged("IDShortTime");
					this.OnIDShortTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountMove", DbType="BigInt NOT NULL")]
		public long AmountMove
		{
			get
			{
				return this._AmountMove;
			}
			set
			{
				if ((this._AmountMove != value))
				{
					this.OnAmountMoveChanging(value);
					this.SendPropertyChanging();
					this._AmountMove = value;
					this.SendPropertyChanged("AmountMove");
					this.OnAmountMoveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateMove", DbType="Date NOT NULL")]
		public System.DateTime DateMove
		{
			get
			{
				return this._DateMove;
			}
			set
			{
				if ((this._DateMove != value))
				{
					this.OnDateMoveChanging(value);
					this.SendPropertyChanging();
					this._DateMove = value;
					this.SendPropertyChanged("DateMove");
					this.OnDateMoveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountSaving_MoveSavingToShortTime", Storage="_AccountSaving", ThisKey="IDSaving", OtherKey="IDAccountSaving", IsForeignKey=true)]
		public AccountSaving AccountSaving
		{
			get
			{
				return this._AccountSaving.Entity;
			}
			set
			{
				AccountSaving previousValue = this._AccountSaving.Entity;
				if (((previousValue != value) 
							|| (this._AccountSaving.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountSaving.Entity = null;
						previousValue.MoveSavingToShortTimes.Remove(this);
					}
					this._AccountSaving.Entity = value;
					if ((value != null))
					{
						value.MoveSavingToShortTimes.Add(this);
						this._IDSaving = value.IDAccountSaving;
					}
					else
					{
						this._IDSaving = default(long);
					}
					this.SendPropertyChanged("AccountSaving");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountShortTime_MoveSavingToShortTime", Storage="_AccountShortTime", ThisKey="IDShortTime", OtherKey="IDAccountShortTime", IsForeignKey=true)]
		public AccountShortTime AccountShortTime
		{
			get
			{
				return this._AccountShortTime.Entity;
			}
			set
			{
				AccountShortTime previousValue = this._AccountShortTime.Entity;
				if (((previousValue != value) 
							|| (this._AccountShortTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountShortTime.Entity = null;
						previousValue.MoveSavingToShortTimes.Remove(this);
					}
					this._AccountShortTime.Entity = value;
					if ((value != null))
					{
						value.MoveSavingToShortTimes.Add(this);
						this._IDShortTime = value.IDAccountShortTime;
					}
					else
					{
						this._IDShortTime = default(long);
					}
					this.SendPropertyChanged("AccountShortTime");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MoveShortTimeToCurrent")]
	public partial class MoveShortTimeToCurrent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IDMoveShortTimeToCurrent;
		
		private long _IDCurrent;
		
		private long _IDShortTime;
		
		private long _AmountMove;
		
		private System.DateTime _DateMove;
		
		private EntityRef<AccountCurrent> _AccountCurrent;
		
		private EntityRef<AccountShortTime> _AccountShortTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMoveShortTimeToCurrentChanging(long value);
    partial void OnIDMoveShortTimeToCurrentChanged();
    partial void OnIDCurrentChanging(long value);
    partial void OnIDCurrentChanged();
    partial void OnIDShortTimeChanging(long value);
    partial void OnIDShortTimeChanged();
    partial void OnAmountMoveChanging(long value);
    partial void OnAmountMoveChanged();
    partial void OnDateMoveChanging(System.DateTime value);
    partial void OnDateMoveChanged();
    #endregion
		
		public MoveShortTimeToCurrent()
		{
			this._AccountCurrent = default(EntityRef<AccountCurrent>);
			this._AccountShortTime = default(EntityRef<AccountShortTime>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMoveShortTimeToCurrent", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IDMoveShortTimeToCurrent
		{
			get
			{
				return this._IDMoveShortTimeToCurrent;
			}
			set
			{
				if ((this._IDMoveShortTimeToCurrent != value))
				{
					this.OnIDMoveShortTimeToCurrentChanging(value);
					this.SendPropertyChanging();
					this._IDMoveShortTimeToCurrent = value;
					this.SendPropertyChanged("IDMoveShortTimeToCurrent");
					this.OnIDMoveShortTimeToCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCurrent", DbType="BigInt NOT NULL")]
		public long IDCurrent
		{
			get
			{
				return this._IDCurrent;
			}
			set
			{
				if ((this._IDCurrent != value))
				{
					if (this._AccountCurrent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCurrentChanging(value);
					this.SendPropertyChanging();
					this._IDCurrent = value;
					this.SendPropertyChanged("IDCurrent");
					this.OnIDCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDShortTime", DbType="BigInt NOT NULL")]
		public long IDShortTime
		{
			get
			{
				return this._IDShortTime;
			}
			set
			{
				if ((this._IDShortTime != value))
				{
					if (this._AccountShortTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDShortTimeChanging(value);
					this.SendPropertyChanging();
					this._IDShortTime = value;
					this.SendPropertyChanged("IDShortTime");
					this.OnIDShortTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountMove", DbType="BigInt NOT NULL")]
		public long AmountMove
		{
			get
			{
				return this._AmountMove;
			}
			set
			{
				if ((this._AmountMove != value))
				{
					this.OnAmountMoveChanging(value);
					this.SendPropertyChanging();
					this._AmountMove = value;
					this.SendPropertyChanged("AmountMove");
					this.OnAmountMoveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateMove", DbType="Date NOT NULL")]
		public System.DateTime DateMove
		{
			get
			{
				return this._DateMove;
			}
			set
			{
				if ((this._DateMove != value))
				{
					this.OnDateMoveChanging(value);
					this.SendPropertyChanging();
					this._DateMove = value;
					this.SendPropertyChanged("DateMove");
					this.OnDateMoveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCurrent_MoveShortTimeToCurrent", Storage="_AccountCurrent", ThisKey="IDCurrent", OtherKey="IDAccountCurrent", IsForeignKey=true)]
		public AccountCurrent AccountCurrent
		{
			get
			{
				return this._AccountCurrent.Entity;
			}
			set
			{
				AccountCurrent previousValue = this._AccountCurrent.Entity;
				if (((previousValue != value) 
							|| (this._AccountCurrent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountCurrent.Entity = null;
						previousValue.MoveShortTimeToCurrents.Remove(this);
					}
					this._AccountCurrent.Entity = value;
					if ((value != null))
					{
						value.MoveShortTimeToCurrents.Add(this);
						this._IDCurrent = value.IDAccountCurrent;
					}
					else
					{
						this._IDCurrent = default(long);
					}
					this.SendPropertyChanged("AccountCurrent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountShortTime_MoveShortTimeToCurrent", Storage="_AccountShortTime", ThisKey="IDShortTime", OtherKey="IDAccountShortTime", IsForeignKey=true)]
		public AccountShortTime AccountShortTime
		{
			get
			{
				return this._AccountShortTime.Entity;
			}
			set
			{
				AccountShortTime previousValue = this._AccountShortTime.Entity;
				if (((previousValue != value) 
							|| (this._AccountShortTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountShortTime.Entity = null;
						previousValue.MoveShortTimeToCurrents.Remove(this);
					}
					this._AccountShortTime.Entity = value;
					if ((value != null))
					{
						value.MoveShortTimeToCurrents.Add(this);
						this._IDShortTime = value.IDAccountShortTime;
					}
					else
					{
						this._IDShortTime = default(long);
					}
					this.SendPropertyChanged("AccountShortTime");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequestCheque")]
	public partial class RequestCheque : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IDRequestCheque;
		
		private long _IDCustomer;
		
		private System.DateTime _date;
		
		private bool _answer;
		
		private long _IDAccountCurrent;
		
		private long _oldcheque_;
		
		private EntityRef<AccountCurrent> _AccountCurrent;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDRequestChequeChanging(long value);
    partial void OnIDRequestChequeChanged();
    partial void OnIDCustomerChanging(long value);
    partial void OnIDCustomerChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnanswerChanging(bool value);
    partial void OnanswerChanged();
    partial void OnIDAccountCurrentChanging(long value);
    partial void OnIDAccountCurrentChanged();
    partial void Onoldcheque_Changing(long value);
    partial void Onoldcheque_Changed();
    #endregion
		
		public RequestCheque()
		{
			this._AccountCurrent = default(EntityRef<AccountCurrent>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRequestCheque", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IDRequestCheque
		{
			get
			{
				return this._IDRequestCheque;
			}
			set
			{
				if ((this._IDRequestCheque != value))
				{
					this.OnIDRequestChequeChanging(value);
					this.SendPropertyChanging();
					this._IDRequestCheque = value;
					this.SendPropertyChanged("IDRequestCheque");
					this.OnIDRequestChequeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="BigInt NOT NULL")]
		public long IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answer", DbType="Bit NOT NULL")]
		public bool answer
		{
			get
			{
				return this._answer;
			}
			set
			{
				if ((this._answer != value))
				{
					this.OnanswerChanging(value);
					this.SendPropertyChanging();
					this._answer = value;
					this.SendPropertyChanged("answer");
					this.OnanswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAccountCurrent", DbType="BigInt NOT NULL")]
		public long IDAccountCurrent
		{
			get
			{
				return this._IDAccountCurrent;
			}
			set
			{
				if ((this._IDAccountCurrent != value))
				{
					if (this._AccountCurrent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAccountCurrentChanging(value);
					this.SendPropertyChanging();
					this._IDAccountCurrent = value;
					this.SendPropertyChanged("IDAccountCurrent");
					this.OnIDAccountCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="oldcheque#", Storage="_oldcheque_", DbType="BigInt NOT NULL")]
		public long oldcheque_
		{
			get
			{
				return this._oldcheque_;
			}
			set
			{
				if ((this._oldcheque_ != value))
				{
					this.Onoldcheque_Changing(value);
					this.SendPropertyChanging();
					this._oldcheque_ = value;
					this.SendPropertyChanged("oldcheque_");
					this.Onoldcheque_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCurrent_RequestCheque", Storage="_AccountCurrent", ThisKey="IDAccountCurrent", OtherKey="IDAccountCurrent", IsForeignKey=true)]
		public AccountCurrent AccountCurrent
		{
			get
			{
				return this._AccountCurrent.Entity;
			}
			set
			{
				AccountCurrent previousValue = this._AccountCurrent.Entity;
				if (((previousValue != value) 
							|| (this._AccountCurrent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountCurrent.Entity = null;
						previousValue.RequestCheques.Remove(this);
					}
					this._AccountCurrent.Entity = value;
					if ((value != null))
					{
						value.RequestCheques.Add(this);
						this._IDAccountCurrent = value.IDAccountCurrent;
					}
					else
					{
						this._IDAccountCurrent = default(long);
					}
					this.SendPropertyChanged("AccountCurrent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_RequestCheque", Storage="_Customer", ThisKey="IDCustomer", OtherKey="IDCustomer", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.RequestCheques.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.RequestCheques.Add(this);
						this._IDCustomer = value.IDCustomer;
					}
					else
					{
						this._IDCustomer = default(long);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.totalCurrent")]
	public partial class totalCurrent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IDTotalCurrent;
		
		private long _IDCustomer;
		
		private System.DateTime _date;
		
		private long _IDAccountCurrent;
		
		private EntityRef<AccountCurrent> _AccountCurrent;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDTotalCurrentChanging(long value);
    partial void OnIDTotalCurrentChanged();
    partial void OnIDCustomerChanging(long value);
    partial void OnIDCustomerChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnIDAccountCurrentChanging(long value);
    partial void OnIDAccountCurrentChanged();
    #endregion
		
		public totalCurrent()
		{
			this._AccountCurrent = default(EntityRef<AccountCurrent>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTotalCurrent", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IDTotalCurrent
		{
			get
			{
				return this._IDTotalCurrent;
			}
			set
			{
				if ((this._IDTotalCurrent != value))
				{
					this.OnIDTotalCurrentChanging(value);
					this.SendPropertyChanging();
					this._IDTotalCurrent = value;
					this.SendPropertyChanged("IDTotalCurrent");
					this.OnIDTotalCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="BigInt NOT NULL")]
		public long IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAccountCurrent", DbType="BigInt NOT NULL")]
		public long IDAccountCurrent
		{
			get
			{
				return this._IDAccountCurrent;
			}
			set
			{
				if ((this._IDAccountCurrent != value))
				{
					if (this._AccountCurrent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAccountCurrentChanging(value);
					this.SendPropertyChanging();
					this._IDAccountCurrent = value;
					this.SendPropertyChanged("IDAccountCurrent");
					this.OnIDAccountCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCurrent_totalCurrent", Storage="_AccountCurrent", ThisKey="IDAccountCurrent", OtherKey="IDAccountCurrent", IsForeignKey=true)]
		public AccountCurrent AccountCurrent
		{
			get
			{
				return this._AccountCurrent.Entity;
			}
			set
			{
				AccountCurrent previousValue = this._AccountCurrent.Entity;
				if (((previousValue != value) 
							|| (this._AccountCurrent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountCurrent.Entity = null;
						previousValue.totalCurrents.Remove(this);
					}
					this._AccountCurrent.Entity = value;
					if ((value != null))
					{
						value.totalCurrents.Add(this);
						this._IDAccountCurrent = value.IDAccountCurrent;
					}
					else
					{
						this._IDAccountCurrent = default(long);
					}
					this.SendPropertyChanged("AccountCurrent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_totalCurrent", Storage="_Customer", ThisKey="IDCustomer", OtherKey="IDCustomer", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.totalCurrents.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.totalCurrents.Add(this);
						this._IDCustomer = value.IDCustomer;
					}
					else
					{
						this._IDCustomer = default(long);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BackCheque")]
	public partial class BackCheque : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IDBackCheque;
		
		private long _IDcheque;
		
		private long _IDcurrent;
		
		private EntityRef<AccountCurrent> _AccountCurrent;
		
		private EntityRef<cheque> _cheque;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDBackChequeChanging(long value);
    partial void OnIDBackChequeChanged();
    partial void OnIDchequeChanging(long value);
    partial void OnIDchequeChanged();
    partial void OnIDcurrentChanging(long value);
    partial void OnIDcurrentChanged();
    #endregion
		
		public BackCheque()
		{
			this._AccountCurrent = default(EntityRef<AccountCurrent>);
			this._cheque = default(EntityRef<cheque>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBackCheque", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IDBackCheque
		{
			get
			{
				return this._IDBackCheque;
			}
			set
			{
				if ((this._IDBackCheque != value))
				{
					this.OnIDBackChequeChanging(value);
					this.SendPropertyChanging();
					this._IDBackCheque = value;
					this.SendPropertyChanged("IDBackCheque");
					this.OnIDBackChequeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDcheque", DbType="BigInt NOT NULL")]
		public long IDcheque
		{
			get
			{
				return this._IDcheque;
			}
			set
			{
				if ((this._IDcheque != value))
				{
					if (this._cheque.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDchequeChanging(value);
					this.SendPropertyChanging();
					this._IDcheque = value;
					this.SendPropertyChanged("IDcheque");
					this.OnIDchequeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDcurrent", DbType="BigInt NOT NULL")]
		public long IDcurrent
		{
			get
			{
				return this._IDcurrent;
			}
			set
			{
				if ((this._IDcurrent != value))
				{
					if (this._AccountCurrent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDcurrentChanging(value);
					this.SendPropertyChanging();
					this._IDcurrent = value;
					this.SendPropertyChanged("IDcurrent");
					this.OnIDcurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCurrent_BackCheque", Storage="_AccountCurrent", ThisKey="IDcurrent", OtherKey="IDAccountCurrent", IsForeignKey=true)]
		public AccountCurrent AccountCurrent
		{
			get
			{
				return this._AccountCurrent.Entity;
			}
			set
			{
				AccountCurrent previousValue = this._AccountCurrent.Entity;
				if (((previousValue != value) 
							|| (this._AccountCurrent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountCurrent.Entity = null;
						previousValue.BackCheques.Remove(this);
					}
					this._AccountCurrent.Entity = value;
					if ((value != null))
					{
						value.BackCheques.Add(this);
						this._IDcurrent = value.IDAccountCurrent;
					}
					else
					{
						this._IDcurrent = default(long);
					}
					this.SendPropertyChanged("AccountCurrent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cheque_BackCheque", Storage="_cheque", ThisKey="IDcheque", OtherKey="IDcheque", IsForeignKey=true)]
		public cheque cheque
		{
			get
			{
				return this._cheque.Entity;
			}
			set
			{
				cheque previousValue = this._cheque.Entity;
				if (((previousValue != value) 
							|| (this._cheque.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cheque.Entity = null;
						previousValue.BackCheques.Remove(this);
					}
					this._cheque.Entity = value;
					if ((value != null))
					{
						value.BackCheques.Add(this);
						this._IDcheque = value.IDcheque;
					}
					else
					{
						this._IDcheque = default(long);
					}
					this.SendPropertyChanged("cheque");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class p_mojodi_currentResult
	{
		
		private System.Nullable<long> _amount;
		
		public p_mojodi_currentResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="BigInt")]
		public System.Nullable<long> amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this._amount = value;
				}
			}
		}
	}
	
	public partial class p_move2CurrentResult
	{
		
		private string _Family;
		
		public p_move2CurrentResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Family", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Family
		{
			get
			{
				return this._Family;
			}
			set
			{
				if ((this._Family != value))
				{
					this._Family = value;
				}
			}
		}
	}
	
	public partial class p_move2SavingResult
	{
		
		private string _Family;
		
		public p_move2SavingResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Family", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Family
		{
			get
			{
				return this._Family;
			}
			set
			{
				if ((this._Family != value))
				{
					this._Family = value;
				}
			}
		}
	}
	
	public partial class p_move2ShortTimeResult
	{
		
		private string _Family;
		
		public p_move2ShortTimeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Family", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Family
		{
			get
			{
				return this._Family;
			}
			set
			{
				if ((this._Family != value))
				{
					this._Family = value;
				}
			}
		}
	}
	
	public partial class p_mojodi_SavingResult
	{
		
		private System.Nullable<long> _amount;
		
		public p_mojodi_SavingResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="BigInt")]
		public System.Nullable<long> amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this._amount = value;
				}
			}
		}
	}
	
	public partial class getIdcurrentResult
	{
		
		private long _IDAccountCurrent;
		
		public getIdcurrentResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAccountCurrent", DbType="BigInt NOT NULL")]
		public long IDAccountCurrent
		{
			get
			{
				return this._IDAccountCurrent;
			}
			set
			{
				if ((this._IDAccountCurrent != value))
				{
					this._IDAccountCurrent = value;
				}
			}
		}
	}
	
	public partial class getIdshorttimeResult
	{
		
		private long _IDAccountShortTime;
		
		public getIdshorttimeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAccountShortTime", DbType="BigInt NOT NULL")]
		public long IDAccountShortTime
		{
			get
			{
				return this._IDAccountShortTime;
			}
			set
			{
				if ((this._IDAccountShortTime != value))
				{
					this._IDAccountShortTime = value;
				}
			}
		}
	}
	
	public partial class getIdlongtimeResult
	{
		
		private long _IDAcountLongTime;
		
		public getIdlongtimeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAcountLongTime", DbType="BigInt NOT NULL")]
		public long IDAcountLongTime
		{
			get
			{
				return this._IDAcountLongTime;
			}
			set
			{
				if ((this._IDAcountLongTime != value))
				{
					this._IDAcountLongTime = value;
				}
			}
		}
	}
	
	public partial class getIdsavingResult
	{
		
		private long _IDAccountSaving;
		
		public getIdsavingResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAccountSaving", DbType="BigInt NOT NULL")]
		public long IDAccountSaving
		{
			get
			{
				return this._IDAccountSaving;
			}
			set
			{
				if ((this._IDAccountSaving != value))
				{
					this._IDAccountSaving = value;
				}
			}
		}
	}
	
	public partial class GTIdCustomerResult
	{
		
		private long _IDCustomer;
		
		public GTIdCustomerResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="BigInt NOT NULL")]
		public long IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					this._IDCustomer = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
